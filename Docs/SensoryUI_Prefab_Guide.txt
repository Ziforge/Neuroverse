// === SensoryUI_Prefab_Guide.txt ===

# ðŸŽ¨ Unity Sensory Settings UI â€“ Prefab Layout Guide

## ðŸ§± UI Structure (Canvas Layout)

Canvas
â””â”€â”€ Panel (Sensory Settings)
    â”œâ”€â”€ Text (Header: "Adjust Your Sensory Experience")
    â”œâ”€â”€ Visual Settings
    â”‚   â”œâ”€â”€ Text ("Visual Intensity")
    â”‚   â”œâ”€â”€ Slider (link to `SensorySettingsUI.visualSlider`)
    â”‚   â””â”€â”€ Text (linked to `visualLabel` for perceptual term)
    â”œâ”€â”€ Audio Settings
    â”‚   â”œâ”€â”€ Text ("Audio Clarity")
    â”‚   â”œâ”€â”€ Slider (link to `audioSlider`)
    â”‚   â””â”€â”€ Text (linked to `audioLabel`)
    â”œâ”€â”€ Haptic Settings
    â”‚   â”œâ”€â”€ Text ("Haptic Strength")
    â”‚   â”œâ”€â”€ Slider (link to `hapticSlider`)
    â”‚   â””â”€â”€ Text (linked to `hapticLabel`)
    â”œâ”€â”€ Motion Settings
    â”‚   â”œâ”€â”€ Text ("Motion Speed")
    â”‚   â”œâ”€â”€ Slider (link to `motionSlider`)
    â”‚   â””â”€â”€ Text (linked to `motionLabel`)
    â””â”€â”€ Button ("Save Preferences")
        â””â”€â”€ OnClick() â†’ `SensorySettingsUI.SaveAll()`

> ðŸ’¡ Tip: Set slider range appropriately for each field.

---

# ðŸ§ª Sample JSON Test Profile (Drop into `Application.persistentDataPath`)

Save this as `user_profile.json` for testing with `UserProfileManager.cs`:

```json
{
  "VisualSensitivity": "High",
  "AudioSensitivity": "Medium",
  "HapticSensitivity": "Low",
  "MotionSensitivity": "Medium",
  "OptOutVisual": false,
  "OptOutAudio": false,
  "OptOutHaptics": false,
  "OptOutMotion": false,
  "VisualIntensity": 0.35,
  "AudioCutoff": 1500,
  "HapticStrength": 0.25,
  "MotionSmoothness": 0.8,
  "TactileTexturePreference": "Smooth"
}
```

---

# ðŸ”„ Connect to Adaptive Filtering Trigger

1. In your `CalibrationScene`, attach `SensorySettingsUI.cs` to an empty GameObject (e.g., `SensoryUIController`)
2. Assign references in the Inspector:
    - Sliders
    - Text labels
    - Manager references (Visual, Audio, Haptic, Motion)
3. When onboarding is completed:

```csharp
// Trigger from button or external system:
SensoryFilterController.Instance.ApplyFromProfile();
```

---

âœ… Now your system supports runtime manual override, perceptual labels, onboarding flow, and JSON testing.

Need UXML/UIToolkit support or mobile UI layout? Let me know!

